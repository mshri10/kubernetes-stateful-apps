# helm repo add hashicorp https://helm.releases.hashicorp.com
# kubectl apply -f pv-local.yaml
# mkdir -p /mnt/disks/vaultssd0 /mnt/disks/vaultssd1 /mnt/disks/vaultssd2 /mnt/disks/vaultssd3
# helm install vault hashicorp/vault --values values.yaml
# helm uninstall vault
# kubectl delete pvc data-vault-0 data-vault-1 data-vault-2 data-vault-3
# kubectl delete pv vaultdisk0 vaultdisk1 vaultdisk2 vaultdisk3
# namespace: vault

injector:
  # Affinity Settings for injector pods
  # This should be a multi-line string matching the affinity section of a
  # PodSpec.
  # Commenting out or setting as empty the affinity variable, will allow
  # deployment of multiple replicas to single node services such as Minikube.
  affinity: |
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values: ["kmaster01"]
server:
  extraVolumes:
    - type: configMap
      name: kes-policy #/vault/userconfig/kes-policy/kes-policy.hcl
  dataStorage:
    enabled: true
    # Size of the PVC created
    size: 5Gi
    # Location where the PVC will be mounted.
    mountPath: "/vault/data"
    # Name of the storage class to use.  If null it will use the
    # configured default Storage Class.
    storageClass: local
    # Access Mode of the storage device being used for the PVC
    accessMode: ReadWriteOnce
    # Annotations to apply to the PVC
    annotations: {}


  
  # Affinity Settings
  # Commenting out or setting as empty the affinity variable, will allow
  # deployment to single node services such as Minikube
  affinity: |
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values: ["kmaster01"]
# Vault UI
ui:
    # True if you want to create a Service entry for the Vault UI.
    #
    # serviceType can be used to control the type of service created. For
    # example, setting this to "LoadBalancer" will create an external load
    # balancer (for supported K8S installations) to access the UI.
    enabled: true
    serviceType: "NodePort"
    serviceNodePort: null
    externalPort: 8200        
     